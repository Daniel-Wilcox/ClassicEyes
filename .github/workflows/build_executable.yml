name: Build Executable
run-name: ${{ github.actor }} is building application executables with GitHub Actions üõ†Ô∏è

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest] #ubuntu-latest, macos-latest, windows-latest

    env:
      APP_NAME: "DAVE$ Wati Extractor"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Set version and app name
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" || "${{ matrix.os }}" == "macos-latest" ]]; then
            version=$(git describe --tags)
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            version=$(git describe --tags | powershell -Command "$input = Get-Content -Raw; Write-Output $input")
          fi
          echo "App version: ${version}"

          sanitized_version=$(echo "$version" | sed 's/\./-/g')
          echo "Sanitized app version: ${sanitized_version}"

          sanitized_app_name=$(echo "$APP_NAME" | sed 's/ /-/g' | sed 's/\$/\\$/g')  # Replace spaces with underscores and escape $
          echo "Sanitized app name: ${sanitized_app_name}" 

          pyinstaller_app_name=$(echo "$APP_NAME $version" | sed 's/\$/\\$/g')  # Replace spaces with underscores and escape $
          echo "Pyinstaller app name: ${pyinstaller_app_name}"

          app_path_name=$(echo "${sanitized_app_name}_${sanitized_version}" | sed 's/\$/\\$/g')  # Replace spaces with underscores and escape $
          echo "Application path name: ${app_path_name}"

      - name: Set up platform-specific Python environment
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            py -m venv .venv
          else
            python -m venv .venv
          fi
          source .venv/bin/activate || .\.venv\Scripts\activate
          pip install -r requirements.txt

      - name: Build executable #add icons later: --icon=myicon.icns | --icon=myicon.ico
        run: |
          source .venv/bin/activate || .\.venv\Scripts\activate
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            pyinstaller app.py --name $pyinstaller_app_name --onedir --windowed
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            pyinstaller app.py --name $pyinstaller_app_name --onedir --windowed
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            pyinstaller app.py --name $pyinstaller_app_name --onedir --windowed
          fi

      - name: Rename and Zip build folder
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            mv dist "${app_path_name}_linux"
            zip -r ${app_path_name}_linux.zip ${app_path_name}_linux
            mkdir -p releases/${sanitized_version}
            mv ${app_path_name}_linux.zip releases/$sanitized_version/
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            mv dist "${app_path_name}_macos"
            zip -r ${app_path_name}_macos.zip ${app_path_name}_macos
            mkdir -p releases/$sanitized_version
            mv ${app_path_name}_macos.zip releases/$sanitized_version/
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            mv dist "${app_path_name}_windows"
            zip -r ${app_path_name}_windows.zip ${app_path_name}_windows
            mkdir -p releases/$sanitized_version
            mv ${app_path_name}_windows.zip releases/$sanitized_version/

      - name: Update README.md with latest links
        run: |
          link_windows="./releases/${sanitized_version}/${app_path_name}_windows.zip"
          link_macos="./releases/${sanitized_version}/${app_path_name}_macos.zip"
          link_linux="./releases/${sanitized_version}/${app_path_name}_linux.zip"
          sed -i.bak "s|Windows: .*|Windows: [Download v${version}](${link_windows})|g" ./README.md
          sed -i.bak "s|MacOs: .*|MacOs: [Download v${version}](${link_macos})|g" ./README.md
          sed -i.bak "s|Linux: .*|Linux: [Download v${version}](${link_linux})|g" ./README.md

      - name: Commit and push all changes (zip files and README.md)
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add releases/$sanitized_version/ README.md
          git commit -m "Add zipped executable files and updated README.md for version ${version}."
          git push origin main
